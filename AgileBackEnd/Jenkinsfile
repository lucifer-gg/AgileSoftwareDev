//githab的凭证
def git_auth = "1de432e5-32a0-43f0-b8c1-786cdeebf028"
//项目名称项目项目名称项目
project_name = "agilesoftwaredev"
//构建版本的名称
def tag = "latest"
//Harbor私服地址
def harbor_url = "172.19.240.234:85"
//Harbor的项目名称
def harbor_project_name = "library"
//Harbor的凭证
def harbor_auth = "508a589b-c8bd-4083-9a1b-9cb5ab6efe7c"
//部署ip
def deploy_ip = "172.19.240.253"
//部署
def getHost(ip){
    def remote = [:]
    remote.name = 'server'
    /*远程服务器ip*/
    remote.host = ip
    /*远程服务器ssh登录账号*/
    remote.user = 'root'
    /*远程服务器ssh端口号*/
    remote.port = 22
    /*远程服务器ssh登录账户密码*/
    remote.password = 'password'
    remote.allowAnyHosts = true
    return remote
}
pipeline {
    agent any
    environment{
        def server = ''
        //定义镜像名称
        def imageName = "${project_name}:${tag}"
    }
    stages{

        stage('拉取代码') {
            steps{
                checkout(
                    [
                        $class: 'GitSCM',
                        branches: [[name: '*/master']],
                        extensions: [],
                        userRemoteConfigs: [
                            [
                                credentialsId: "${git_auth}",
                                url: 'https://github.com/lucifer-gg/AgileSoftwareDev.git']
                            ]
                        ])
            }
        }
    //    stage('代码审查') {
    //    	def scannerHome = tool 'sonarqube-scanner'
    //    	withSonarQubeEnv('sonarqube6.7.4') {
    //    		sh """
    //    		cd $ {project_name}
    //    		$ {scannerHome}/bin/sonar-scanner
    //    		"""
    //    	}
    //    }
        stage('编译，构建镜像') {
            steps{

               	//编译，构建本地镜像
               	sh "cd AgileBackEnd && mvn clean package"
               	sh "cd AgileBackEnd && docker build -t ${imageName} ."
               	//给镜像打标签
               	sh "docker tag ${imageName} ${harbor_url}/${harbor_project_name}/${imageName}"
               	//登录Harbor，并上传镜像
               	withCredentials([usernamePassword(
                           credentialsId: "${harbor_auth}",
                           passwordVariable: 'password',  // 就是这样的，不用替换，在jk中配置的
                           usernameVariable: 'username')])
               	{
               		//登录
               		sh "docker login -u ${username} -p ${password} ${harbor_url}"
               		//上传镜像
               		sh "docker push ${harbor_url}/${harbor_project_name}/${imageName}"
               	}
           	    //删除本地镜像
           	    sh "docker rmi -f ${imageName}"
           	    sh "docker rmi -f ${harbor_url}/${harbor_project_name}/${imageName}"
            }
        }
        stage('部署'){
            steps{
                script {
                   server = getHost(deploy_ip)
                }
                withCredentials([usernamePassword(
                    credentialsId: "${harbor_auth}",
                    passwordVariable: 'password',  // 就是这样的，不用替换，在jk中配置的
                    usernameVariable: 'username')])
           	    {
           	        /*远程服务器中查找是否存在镜像，如果存在就删除，如果不存在就pull拉取私库中镜像*/
                    sshCommand remote: server, command: """
                    image_name='docker images|grep -i ${harbor_url}/${harbor_project_name}/${imageName}|awk '{print \$1}'';
                    if [ \$image_name ];
                    then
                        docker rmi \$image_name;
                    fi;
                    docker login -u ${username} -p ${password} ${harbor_url};
                    docker pull ${harbor_url}/${harbor_project_name}/${imageName};
                    docker run -itd -p ${deploy_ip}:8888:8888 ${harbor_url}/${harbor_project_name}/${imageName} /bin/bash;
                    """
           	    }
            }
        }
    }
}
